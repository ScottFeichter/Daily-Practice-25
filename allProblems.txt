
08-Problem-Function
create a function that takes two numbers input and outputs their product
 
09-Problem-Function-Multiply-Immut-Mut
create a mutable variable and an immutable variable. create a function multiply that returns the product of 2 arguments. print the values of the variables and print their product using the multiply function.
 
10-Problem-Function-Multiply-Mut-Loop-Increment-If-Even
Create a mutable and an immutable. Create a function that will increment the mutable in the amount of the immutable  using a loop if the mutable is even. If the immutable is odd return the mutable
 
11-Problem-NicksStuff
Nick makes variables in many languages
 
12-Problem-Function-Char-Count
Create an int mut variable identified as count and set it to 0. Create a bool mut var id moreThanTen set to false. Create an int func num arg that loops to count chars in a string called length. Create 3 str immut vars. Pass them through to count length and pass the result to moreThanTen. Print the result for each str immut.
 
13-Problem-Function-Multiply-Mut-Loop-Immut
Create a mutable variable identified as num1 and an immutable variable as num2. Create a function to check if num1 is even - if yes increment num1 by the amount of num2. If no then return num1.
 
14-Problem-Variables-All-Function-IsString-Loop
Create an immut var id num, immut var id str1, str2, str3, immut var id bools, immut var id char, immut var floats. Create an mut var id count. Create a fn id isString to return true false if arg is a string. Create a fn with no return that increments count if the arg is a string. Print all the vars and print count before and after checking all the vars.
 
15-Problem-Primitives-Loop-Conditional-Function
Initiate a variable for every primitive. Initiate an int id count set to 0. Declare fn incrementCount that takes an int and if int gt 5 will loop the amount of int adding local adder + 1 each loop. Print all variables and run the int variable through incrementCount and print the return.
 
16-Problem-RandomFifteen
Do everything in problem 15 but make the int generated from randome between 1 - 10
 
17-Problem-RepeatSixteen
Repeat problem 16 to work in the rote memorization of declaring most types, generating random numbers in a range, declaring a functions, using loops, using conditionals, and printing to console.
 

// 1. UNDERSTAND THE PROBLEM
//        INPUT AND OUTPUT
//        WHAT DOES IT WANT ME TO DO?
//        WHAT DOES IT RECEIVE AND RETURN?

// 2. THINK OF EDGE CASES
//        AN EMPTY STRING WHEN YOU EXPECT TO GET A STRING OF CHARACTERS
//        A NEGATIVE NUMBER OR 0 WHEN YOU EXPECT TO GET A POSITIVE INTEGER
//        A REALLY LARGE NUMBER THAT IS OUTSIDE THE EXPECTED RANGE
//        A DIFFERENT DATA TYPE THAN EXPECTED

// 3. COME UP WITH SOME TEST CASES
//        EXAMPLES OF EXPECTED INPUTS AND OUTPUTS

// 4. WRITE PSEUDOCODE
//        STEP BY STEP INSTRUCTIONS IN HUMAN READABLE FORM

// 5. FINALLY, START CODING
//        SHOULD BE MOSTLY FIGURING OUT SYNTAX FOR THE PSEUDOCODE

// 6. BE THE COMPUTER (THINK THROUGH THE EXECUTION)
//        WALK THROUGH CASES AND VERIFY THAT YOU RECEIVE EXPECTED RESULTS
//        TALK IT OUT LOUD

// 7. RUN AND TEST THE CODE

// 8. DEBUGGING
//    DEVELOP HYPOTHESIS ABOUT THE PROBLEM
//      TRY TO CREATE HYPOTHESIS THAT ARE UNIQUE/NON-OVERLAPPING
//      TEST AND VERIFY
//      ADJUST HYPOTHESIS AS NEEDED
//    USE CONSOLE.LOG
//    RUN TEST CASES
//    USE THE BUILT-IN DEBUGGER TO STEP THROUGH CODE

// 9. IMPLEMENT SOLUTIONS

